library(cowplot)
library(tidyverse)
library(dplyr)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
```
### Load Data
```{r}
prob_list <- c("median", "compare-string-lengths", "small-or-large", "smallest", "for-loop-index")
sel_list <- c("COHORT_LEX", "DOWN_SAMPLE_TESTS", "PROG_ONLY_COHORT_LEX", "TRUNCATED")
for (sel in sel_list)
{
for (prob in prob_list)
{
sol_100_log <- paste("../Raw/100_Or_Less/",prob,"__",sel,"__violin__eval.csv", sep = "")
sol_300_log <- paste("../Raw/300_Or_Less/",prob,"__",sel,"__violin__eval.csv", sep = "")
sol_half_log <- paste("../Raw/HalfLife/",prob,"__",sel,"__violin__eval.csv", sep = "")
sol_full_log <- paste("../Raw/FullLife/",prob,"__",sel,"__violin__eval.csv", sep = "")
sol_100 <- read.csv(sol_100_log, na.strings = "NONE")
sol_300 <- read.csv(sol_300_log, na.strings = "NONE")
sol_half <- read.csv(sol_half_log, na.strings = "NONE")
sol_full <- read.csv(sol_full_log, na.strings = "NONE")
if (nrow(sol_100) > 1)
{
ggplot(sol_100, mapping=aes(x=dims, y=eval, fill=dims, colour=dims, scale_x_log10(eval))) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = eval),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Evaluation Found") + ylim(0, 30000000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 100 gens worth of evals") +
ggsave(paste("../Figs/Evaluations/SolutionCount/100_Or_Less/Violin/", prob,"__",sel,"__violin_eval_100.png", sep = ""), height=15, width=17)
}
if (nrow(sol_300) > 1)
{
ggplot(sol_300, mapping=aes(x=dims, y=eval, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = eval),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Evaluation Found") + ylim(0, 80000000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 300 gens worth of evals") +
ggsave(paste("../Figs/Evaluations/SolutionCount/300_Or_Less/Violin/", prob,"__",sel,"__violin_eval_300.png", sep = ""), height=15, width=10)
}
if ((nrow(sol_half) > 1) & (prob != 'for-loop-index'))
{
ggplot(sol_half, mapping=aes(x=dims, y=eval, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = eval),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Evaluation Found") + ylim(0, 150000000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 500 gens worth of evals") +
ggsave(paste("../Figs/Evaluations/SolutionCount/HalfLife/Violin/", prob,"__",sel,"__violin_eval_half.png", sep = ""), height=15, width=10)
}
if ((nrow(sol_half) > 1) & (prob != 'for-loop-index'))
{
ggplot(sol_full, mapping=aes(x=dims, y=eval, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = eval),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Evaluation Found") + ylim(0, 200000000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 1000 gens worth of evals") +
ggsave(paste("../Figs/Evaluations/SolutionCount/FullLife/Violin/", prob,"__",sel,"__violin_eval_full.png", sep = ""), height=15, width=10)
}
}
}
```
---
title: "Sorting network data exploration"
output:
html_document:
keep_md: yes
toc: true
toc_float: true
collapsed: false
theme: default
pdf_document: default
---
## Setup
### Dependencies
```{r}
library(readr)
library(tidyr)
library(ggplot2)
library(plyr)
library(reshape2)
library(cowplot)
library(tidyverse)
library(dplyr)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
```
### Load Data
```{r}
prob_list <- c("median", "compare-string-lengths", "small-or-large", "smallest")
sel_list <- c("COHORT_LEX", "DOWN_SAMPLE_TESTS", "PROG_ONLY_COHORT_LEX", "TRUNCATED")
for (sel in sel_list)
{
for (prob in prob_list)
{
sol_100_log <- paste("../Raw/100_Or_Less/",prob,"__",sel,"__violin__gens.csv", sep = "")
sol_300_log <- paste("../Raw/300_Or_Less/",prob,"__",sel,"__violin__gens.csv", sep = "")
sol_half_log <- paste("../Raw/HalfLife/",prob,"__",sel,"__violin__gens.csv", sep = "")
sol_full_log <- paste("../Raw/FullLife/",prob,"__",sel,"__violin__gens.csv", sep = "")
sol_100 <- read.csv(sol_100_log, na.strings = "NONE")
sol_300 <- read.csv(sol_300_log, na.strings = "NONE")
sol_half <- read.csv(sol_half_log, na.strings = "NONE")
sol_full <- read.csv(sol_full_log, na.strings = "NONE")
if (nrow(sol_100) > 1)
{
ggplot(sol_100, mapping=aes(x=dims, y=gens, fill=dims, colour=dims, scale_x_log10(gens))) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = gens),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Generation Found") + ylim(0, 100) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 100 generations") +
ggsave(paste("../Figs/Generations/SolutionCount/100_Or_Less/Violin/", prob,"__",sel,"__violin_gens_100.png", sep = ""), height=15, width=17)
}
if (nrow(sol_300) > 1)
{
ggplot(sol_300, mapping=aes(x=dims, y=gens, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = gens),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Generation Found") + ylim(0, 300) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 300 generations") +
ggsave(paste("../Figs/Generations/SolutionCount/300_Or_Less/Violin/", prob,"__",sel,"__violin_gens_300.png", sep = ""), height=15, width=10)
}
if ((nrow(sol_half) > 1) & (prob != 'for-loop-index'))
{
ggplot(sol_half, mapping=aes(x=dims, y=gens, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = gens),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Generation Found") + ylim(0, 500) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 500 generations") +
ggsave(paste("../Figs/Generations/SolutionCount/HalfLife/Violin/", prob,"__",sel,"__violin_gens_half.png", sep = ""), height=15, width=10)
}
if ((nrow(sol_half) > 1) & (prob != 'for-loop-index'))
{
ggplot(sol_full, mapping=aes(x=dims, y=gens, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = gens),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Generation Found") + ylim(0, 1000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 1000 generations") +
ggsave(paste("../Figs/Generations/SolutionCount/FullLife/Violin/", prob,"__",sel,"__violin_gens_full.png", sep = ""), height=15, width=10)
}
}
}
```
---
title: "Sorting network data exploration"
output:
html_document:
keep_md: yes
toc: true
toc_float: true
collapsed: false
theme: default
pdf_document: default
---
<!-- ## Setup -->
<!-- ### Dependencies -->
```{r}
library(readr)
library(tidyr)
library(ggplot2)
library(plyr)
library(reshape2)
library(cowplot)
```
### Load Data
```{r}
sel_list <- c("COHORT_LEX", "DOWN_SAMPLE_TESTS", "PROG_ONLY_COHORT_LEX", "TRUNCATED")
for (sel in sel_list)
{
prob_100_gen_loc <- paste("../Raw/100_Or_Less/Problem__Generations__", sel, ".csv", sep = "")
prob_300_gen_loc <- paste("../Raw/300_Or_Less/Problem__Generations__", sel, ".csv", sep = "")
prob_half_gen_loc <- paste("../Raw/HalfLife/Problem__Generations__", sel, ".csv", sep = "")
prob_full_gen_loc <- paste("../Raw/FullLife/Problem__Generations__", sel, ".csv", sep = "")
prob_100_eva_loc <- paste("../Raw/100_Or_Less/Problem__Evaluations__", sel, ".csv", sep = "")
prob_300_eva_loc <- paste("../Raw/300_Or_Less/Problem__Evaluations__", sel, ".csv", sep = "")
prob_half_eva_loc <- paste("../Raw/HalfLife/Problem__Evaluations__", sel, ".csv", sep = "")
prob_full_eva_loc <- paste("../Raw/FullLife/Problem__Evaluations__", sel, ".csv", sep = "")
prob_100_gen <- read.csv(prob_100_gen_loc, na.strings = "NONE")
prob_300_gen <- read.csv(prob_300_gen_loc, na.strings = "NONE")
prob_half_gen <- read.csv(prob_half_gen_loc, na.strings = "NONE")
prob_full_gen <- read.csv(prob_full_gen_loc, na.strings = "NONE")
prob_100_eva <- read.csv(prob_100_eva_loc, na.strings = "NONE")
prob_300_eva <- read.csv(prob_300_eva_loc, na.strings = "NONE")
prob_half_eva <- read.csv(prob_half_eva_loc, na.strings = "NONE")
prob_full_eva <- read.csv(prob_full_eva_loc, na.strings = "NONE")
#Will plot graphs for solutions found before 100 generation
ggplot(data = prob_100_gen, mapping=aes(x=dims, y=count, fill=dims)) +
geom_bar(stat="identity") + xlab("Dimensions") + ylab("Solutions Found") + ylim(0, 50) + guides(fill=FALSE) +
geom_text(aes(label=count), nudge_y=2) +
ggtitle("Solutions up to 100 generations") +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
coord_flip() + facet_wrap( ~ problem) + ggsave(paste("../Figs/Generations/SolutionCount/100_Or_Less/Problems/", sel,"__Problem_Count_100.png", sep = ""), height=15, width=17)
#Will plot graphs for soulutions found before 300 generations
ggplot(data = prob_300_gen, mapping=aes(x=dims, y=count, fill=dims)) +
geom_bar(stat="identity") + xlab("Dimensions") + ylab("Solutions Found") + ylim(0, 50) + guides(fill=FALSE) +
geom_text(aes(label=count), nudge_y=2) +
ggtitle("Solutions up to 300 generations") +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
coord_flip() + facet_wrap( ~ problem) + ggsave(paste("../Figs/Generations/SolutionCount/300_Or_Less/Problems/", sel,"__Problem_Count_300.png", sep = ""), height=15, width=17)
#Will plot graphs for solutions found before half life, 500 generation
ggplot(data = prob_half_gen, mapping=aes(x=dims, y=count, fill=dims)) +
geom_bar(stat="identity") + xlab("Dimensions") + ylab("Solutions Found") + ylim(0, 50) + guides(fill=FALSE) +
geom_text(aes(label=count), nudge_y=2) +
ggtitle("Solutions up to 500 generations") +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
coord_flip() + facet_wrap( ~ problem) + ggsave(paste("../Figs/Generations/SolutionCount/HalfLife/Problems/", sel,"__Problem_Count_500.png", sep = ""), height=15, width=17)
#Will plot graphs for solutions found at the end of the run, 1000 generations
ggplot(data = prob_full_gen, mapping=aes(x=dims, y=count, fill=dims)) +
geom_bar(stat="identity") + xlab("Dimensions") + ylab("Solutions Found") + ylim(0, 50) + guides(fill=FALSE) +
geom_text(aes(label=count), nudge_y=2) +
ggtitle("Solutions found at the end of run") +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
coord_flip() + facet_wrap( ~ problem) + ggsave(paste("../Figs/Generations/SolutionCount/FullLife/Problems/", sel,"__Problem_Count_1000.png", sep = ""), height=15, width=17)
ggplot(data = prob_100_eva, mapping=aes(x=dims, y=count, fill=dims)) +
geom_bar(stat="identity") + xlab("Dimensions") + ylab("Solutions Found") + ylim(0, 50) + guides(fill=FALSE) +
geom_text(aes(label=count), nudge_y=2) +
ggtitle("Solutions up to 100 gens worth of evals") +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
coord_flip() + facet_wrap( ~ problem) + ggsave(paste("../Figs/Evaluations/SolutionCount/100_Or_Less/Problems/", sel,"__Problem_Count_100.png", sep = ""), height=15, width=17)
ggplot(data = prob_300_eva, mapping=aes(x=dims, y=count, fill=dims)) +
geom_bar(stat="identity") + xlab("Dimensions") + ylab("Solutions Found") + ylim(0, 50) + guides(fill=FALSE) +
geom_text(aes(label=count), nudge_y=2) +
ggtitle("Solutions up to 300 gens worth of evals") +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
coord_flip() + facet_wrap( ~ problem) + ggsave(paste("../Figs/Evaluations/SolutionCount/300_Or_Less/Problems/", sel,"__Problem_Count_300.png", sep = ""), height=15, width=17)
ggplot(data = prob_half_eva, mapping=aes(x=dims, y=count, fill=dims)) +
geom_bar(stat="identity") + xlab("Dimensions") + ylab("Solutions Found") + ylim(0, 50) + guides(fill=FALSE) +
geom_text(aes(label=count), nudge_y=2) +
ggtitle("Solutions up to 500 gens worth of evals") +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
coord_flip() + facet_wrap( ~ problem) + ggsave(paste("../Figs/Evaluations/SolutionCount/HalfLife/Problems/", sel,"__Problem_Count_500.png", sep = ""), height=15, width=17)
ggplot(data = prob_full_eva, mapping=aes(x=dims, y=count, fill=dims)) +
geom_bar(stat="identity") + xlab("Dimensions") + ylab("Solutions Found") + ylim(0, 50) + guides(fill=FALSE) +
geom_text(aes(label=count), nudge_y=2) +
ggtitle("Solutions up to 1000 gens worth of evals") +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
coord_flip() + facet_wrap( ~ problem) + ggsave(paste("../Figs/Evaluations/SolutionCount/FullLife/Problems/", sel,"__Problem_Count_1000.png", sep = ""), height=15, width=17)
}
```
---
title: "Sorting network data exploration"
output:
html_document:
keep_md: yes
toc: true
toc_float: true
collapsed: false
theme: default
pdf_document: default
---
## Setup
### Dependencies
```{r}
library(readr)
library(tidyr)
library(ggplot2)
library(plyr)
library(reshape2)
library(cowplot)
library(tidyverse)
library(dplyr)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
```
### Load Data
```{r}
prob_list <- c("median", "compare-string-lengths", "small-or-large", "smallest", "for-loop-index")
sel_list <- c("COHORT_LEX", "DOWN_SAMPLE_TESTS", "PROG_ONLY_COHORT_LEX", "TRUNCATED")
for (sel in sel_list)
{
for (prob in prob_list)
{
sol_100_log <- paste("../Raw/100_Or_Less/",prob,"__",sel,"__violin__eval.csv", sep = "")
sol_300_log <- paste("../Raw/300_Or_Less/",prob,"__",sel,"__violin__eval.csv", sep = "")
sol_half_log <- paste("../Raw/HalfLife/",prob,"__",sel,"__violin__eval.csv", sep = "")
sol_full_log <- paste("../Raw/FullLife/",prob,"__",sel,"__violin__eval.csv", sep = "")
sol_100 <- read.csv(sol_100_log, na.strings = "NONE")
sol_300 <- read.csv(sol_300_log, na.strings = "NONE")
sol_half <- read.csv(sol_half_log, na.strings = "NONE")
sol_full <- read.csv(sol_full_log, na.strings = "NONE")
if (nrow(sol_100) > 1)
{
ggplot(sol_100, mapping=aes(x=dims, y=eval, fill=dims, colour=dims, scale_x_log10(eval))) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = eval),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Evaluation Found") + ylim(0, 30000000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 100 gens worth of evals") +
ggsave(paste("../Figs/Evaluations/SolutionCount/100_Or_Less/Violin/", prob,"__",sel,"__violin_eval_100.png", sep = ""), height=15, width=17)
}
if (nrow(sol_300) > 1)
{
ggplot(sol_300, mapping=aes(x=dims, y=eval, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = eval),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Evaluation Found") + ylim(0, 80000000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 300 gens worth of evals") +
ggsave(paste("../Figs/Evaluations/SolutionCount/300_Or_Less/Violin/", prob,"__",sel,"__violin_eval_300.png", sep = ""), height=15, width=10)
}
if ((nrow(sol_half) > 1) & (prob != 'for-loop-index'))
{
ggplot(sol_half, mapping=aes(x=dims, y=eval, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = eval),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Evaluation Found") + ylim(0, 150000000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 500 gens worth of evals") +
ggsave(paste("../Figs/Evaluations/SolutionCount/HalfLife/Violin/", prob,"__",sel,"__violin_eval_half.png", sep = ""), height=15, width=10)
}
if ((nrow(sol_half) > 1) & (prob != 'for-loop-index'))
{
ggplot(sol_full, mapping=aes(x=dims, y=eval, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = eval),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Evaluation Found") + ylim(0, 200000000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 1000 gens worth of evals") +
ggsave(paste("../Figs/Evaluations/SolutionCount/FullLife/Violin/", prob,"__",sel,"__violin_eval_full.png", sep = ""), height=15, width=10)
}
}
}
```
---
title: "Sorting network data exploration"
output:
html_document:
keep_md: yes
toc: true
toc_float: true
collapsed: false
theme: default
pdf_document: default
---
## Setup
### Dependencies
```{r}
library(readr)
library(tidyr)
library(ggplot2)
library(plyr)
library(reshape2)
library(cowplot)
library(tidyverse)
library(dplyr)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
```
### Load Data
```{r}
prob_list <- c("median", "compare-string-lengths", "small-or-large", "smallest")
sel_list <- c("COHORT_LEX", "DOWN_SAMPLE_TESTS", "PROG_ONLY_COHORT_LEX", "TRUNCATED")
for (sel in sel_list)
{
for (prob in prob_list)
{
sol_100_log <- paste("../Raw/100_Or_Less/",prob,"__",sel,"__violin__gens.csv", sep = "")
sol_300_log <- paste("../Raw/300_Or_Less/",prob,"__",sel,"__violin__gens.csv", sep = "")
sol_half_log <- paste("../Raw/HalfLife/",prob,"__",sel,"__violin__gens.csv", sep = "")
sol_full_log <- paste("../Raw/FullLife/",prob,"__",sel,"__violin__gens.csv", sep = "")
sol_100 <- read.csv(sol_100_log, na.strings = "NONE")
sol_300 <- read.csv(sol_300_log, na.strings = "NONE")
sol_half <- read.csv(sol_half_log, na.strings = "NONE")
sol_full <- read.csv(sol_full_log, na.strings = "NONE")
if (nrow(sol_100) > 1)
{
ggplot(sol_100, mapping=aes(x=dims, y=gens, fill=dims, colour=dims, scale_x_log10(gens))) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = gens),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Generation Found") + ylim(0, 100) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 100 generations") +
ggsave(paste("../Figs/Generations/SolutionCount/100_Or_Less/Violin/", prob,"__",sel,"__violin_gens_100.png", sep = ""), height=15, width=17)
}
if (nrow(sol_300) > 1)
{
ggplot(sol_300, mapping=aes(x=dims, y=gens, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = gens),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Generation Found") + ylim(0, 300) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 300 generations") +
ggsave(paste("../Figs/Generations/SolutionCount/300_Or_Less/Violin/", prob,"__",sel,"__violin_gens_300.png", sep = ""), height=15, width=10)
}
if ((nrow(sol_half) > 1) & (prob != 'for-loop-index'))
{
ggplot(sol_half, mapping=aes(x=dims, y=gens, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = gens),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Generation Found") + ylim(0, 500) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 500 generations") +
ggsave(paste("../Figs/Generations/SolutionCount/HalfLife/Violin/", prob,"__",sel,"__violin_gens_half.png", sep = ""), height=15, width=10)
}
if ((nrow(sol_half) > 1) & (prob != 'for-loop-index'))
{
ggplot(sol_full, mapping=aes(x=dims, y=gens, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = gens),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Generation Found") + ylim(0, 1000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 1000 generations") +
ggsave(paste("../Figs/Generations/SolutionCount/FullLife/Violin/", prob,"__",sel,"__violin_gens_full.png", sep = ""), height=15, width=10)
}
}
}
```
---
title: "Sorting network data exploration"
output:
html_document:
keep_md: yes
toc: true
toc_float: true
collapsed: false
theme: default
pdf_document: default
---
## Setup
### Dependencies
```{r}
library(readr)
library(tidyr)
library(ggplot2)
library(plyr)
library(reshape2)
library(cowplot)
library(tidyverse)
library(dplyr)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
```
### Load Data
```{r}
prob_list <- c("median", "compare-string-lengths", "small-or-large", "smallest", "for-loop-index")
sel_list <- c("COHORT_LEX", "DOWN_SAMPLE_TESTS", "PROG_ONLY_COHORT_LEX", "TRUNCATED")
for (sel in sel_list)
{
for (prob in prob_list)
{
sol_100_log <- paste("../Raw/100_Or_Less/",prob,"__",sel,"__violin__eval.csv", sep = "")
sol_300_log <- paste("../Raw/300_Or_Less/",prob,"__",sel,"__violin__eval.csv", sep = "")
sol_half_log <- paste("../Raw/HalfLife/",prob,"__",sel,"__violin__eval.csv", sep = "")
sol_full_log <- paste("../Raw/FullLife/",prob,"__",sel,"__violin__eval.csv", sep = "")
sol_100 <- read.csv(sol_100_log, na.strings = "NONE")
sol_300 <- read.csv(sol_300_log, na.strings = "NONE")
sol_half <- read.csv(sol_half_log, na.strings = "NONE")
sol_full <- read.csv(sol_full_log, na.strings = "NONE")
if (nrow(sol_100) > 1)
{
ggplot(sol_100, mapping=aes(x=dims, y=eval, fill=dims, colour=dims, scale_x_log10(eval))) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = eval),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Evaluation Found") + ylim(0, 30000000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 100 gens worth of evals") +
ggsave(paste("../Figs/Evaluations/SolutionCount/100_Or_Less/Violin/", prob,"__",sel,"__violin_eval_100.png", sep = ""), height=15, width=17)
}
if (nrow(sol_300) > 1)
{
ggplot(sol_300, mapping=aes(x=dims, y=eval, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = eval),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Evaluation Found") + ylim(0, 80000000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 300 gens worth of evals") +
ggsave(paste("../Figs/Evaluations/SolutionCount/300_Or_Less/Violin/", prob,"__",sel,"__violin_eval_300.png", sep = ""), height=15, width=10)
}
if ((nrow(sol_half) > 1) & (prob != 'for-loop-index'))
{
ggplot(sol_half, mapping=aes(x=dims, y=eval, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = eval),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Evaluation Found") + ylim(0, 150000000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 500 gens worth of evals") +
ggsave(paste("../Figs/Evaluations/SolutionCount/HalfLife/Violin/", prob,"__",sel,"__violin_eval_half.png", sep = ""), height=15, width=10)
}
if ((nrow(sol_half) > 1) & (prob != 'for-loop-index'))
{
ggplot(sol_full, mapping=aes(x=dims, y=eval, fill=dims, colour=dims)) +
geom_flat_violin(position=position_nudge(x=.2, y=0), adjust=2) +
geom_point(position = position_jitter(width = .15), size = .25) +
geom_boxplot(aes(x = dims, y = eval),outlier.shape = NA, alpha = 0.3, width = .1, colour = "BLACK") +
ylab("Evaluation Found") + ylim(0, 200000000) + xlab("Dimension") + coord_flip() + guides(fill=FALSE, colour=FALSE) +
scale_x_discrete(limits = c("cn1_cs512", "cn2_cs256", "cn4_cs128", "cn8_cs64", "cn16_cs32", "cn32_cs16", "cn64_cs8", "cn128_cs4", "cn256_cs2")) +
ggtitle("Solutions found up to 1000 gens worth of evals") +
ggsave(paste("../Figs/Evaluations/SolutionCount/FullLife/Violin/", prob,"__",sel,"__violin_eval_full.png", sep = ""), height=15, width=10)
}
}
}
```
